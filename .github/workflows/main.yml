name: CI-CD Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore
        shell: powershell

      - name: Build project
        run: dotnet build --configuration Release --no-restore
        shell: powershell

      - name: Publish project
        run: dotnet publish -c Release -o ./publish
        shell: powershell

      - name: Backup current deployment
        shell: powershell
        run: |
          $source = "C:\inetpub\wwwroot\Book_Publish"
          if (Test-Path $source) {
            $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
            $backupDir = "C:\inetpub\wwwroot\BookBackup\Backup_$timestamp"
            New-Item -ItemType Directory -Force -Path $backupDir | Out-Null
            Copy-Item -Path "$source\*" -Destination $backupDir -Recurse -Force
            Write-Host "Backup created at $backupDir"
          } else {
            Write-Host "No existing deployment found, skipping backup."
          }

      - name: Clean publish folder
        shell: powershell
        run: |
          $dest = "C:\inetpub\wwwroot\Book_Publish"
          Write-Host "=== Cleaning destination: $dest ==="

          $procs = "iisexpress","dotnet","w3wp"
          foreach ($p in $procs) {
              Get-Process $p -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          }

          if (-not (Test-Path $dest)) {
              Write-Host "Folder does not exist. Creating..."
              New-Item -ItemType Directory -Path $dest | Out-Null
          }

          Get-ChildItem -Path $dest -Recurse -Force -ErrorAction SilentlyContinue | ForEach-Object {
              if ($_.Attributes -band [System.IO.FileAttributes]::ReadOnly) {
                  $_.Attributes = 'Normal'
              }
          }

          $maxRetries = 5
          for ($i = 0; $i -lt $maxRetries; $i++) {
              try {
                  if (Test-Path $dest) {
                      Write-Host "Attempting to delete folder (try $($i+1)/$maxRetries)..."
                      Remove-Item -LiteralPath $dest -Recurse -Force -ErrorAction Stop
                  }
                  break
              } catch {
                  Write-Host "Deletion attempt $($i+1) failed, retrying in 2 seconds..."
                  Start-Sleep -Seconds 2
              }
          }

          if (-not (Test-Path $dest)) {
              Write-Host "Recreating clean destination folder..."
              New-Item -ItemType Directory -Path $dest | Out-Null
          }

          Write-Host "=== Cleanup completed successfully ==="

      - name: Copy new published files to destination
        shell: powershell
        run: |
          $source = "$env:GITHUB_WORKSPACE\publish"
          $dest = "C:\inetpub\wwwroot\Book_Publish"
          Copy-Item -Path "$source\*" -Destination $dest -Recurse -Force
          Write-Host "Files copied successfully."

      - name: Restart IIS site
        shell: powershell
        run: |
          Import-Module WebAdministration
          if (Get-Website -Name "DotStarkblog" -ErrorAction SilentlyContinue) {
            Restart-WebItem 'IIS:\Sites\BookingSite'
            Write-Host "Site 'BookingSite' restarted."
          } else {
            Write-Host "IIS site 'BookingSite' not found, please check if it exists in IIS Manager."
          }
